      
      const pos = positions[profileSettingsData.watermark_position] || positions['bottom-right'];
      Object.keys(pos).forEach(key => {
        previewWatermark.style[key] = pos[key];
      });
    }
    
    // Reinitialize drag functionality after updating the watermark
    setTimeout(() => { if (window.initWatermarkDrag) window.initWatermarkDrag(); }, 100);
  } else {
    previewWatermark.style.display = 'none';
  }
}

// Save profile settings to Supabase
async function saveProfileSettings() {
  try {
    const client = getSupabaseClient();
    if (!client) return;
    
    // Get current form values
    const storeNameInput = document.getElementById('store-name');
    const watermarkUrlInput = document.getElementById('watermark-url');
    const watermarkOpacityInput = document.getElementById('watermark-opacity');
    const watermarkPositionInput = document.getElementById('watermark-position');
    const watermarkSizeInput = document.getElementById('watermark-size');
    
    // Handle custom watermark position
    let watermarkPosition = watermarkPositionInput ? watermarkPositionInput.value : 'bottom-right';
    if (watermarkPosition === 'custom') {
      // If the position is custom, use the current custom position from profileSettingsData
      watermarkPosition = profileSettingsData.watermark_position || 'bottom-right';
    }
    // Normalize custom position to safe integer percentages (0..100)
    if (typeof watermarkPosition === 'string' && watermarkPosition.startsWith('custom:')) {
      const parts = watermarkPosition.split(':');
      if (parts.length === 3) {
        let x = Math.round(parseFloat(parts[1]));
        let y = Math.round(parseFloat(parts[2]));
        if (Number.isFinite(x) && Number.isFinite(y)) {
          x = Math.max(0, Math.min(100, x));
          y = Math.max(0, Math.min(100, y));
          watermarkPosition = `custom:${x}:${y}`;
        } else {
          // Fallback if parse failed
          watermarkPosition = 'bottom-right';
        }
      } else {
        watermarkPosition = 'bottom-right';
      }
    }
    
    profileSettingsData = {
      store_name: storeNameInput ? storeNameInput.value : 'Watch Configurator',
      watermark_url: watermarkUrlInput ? watermarkUrlInput.value : '',
      watermark_opacity: watermarkOpacityInput ? watermarkOpacityInput.value / 100 : 0.5,
      watermark_position: watermarkPosition,
      watermark_size: watermarkSizeInput ? parseInt(watermarkSizeInput.value) : 100
    };
    
    // First, get the existing record ID
    const { data: existingData, error: fetchError } = await client
      .from('profile_settings')
      .select('id')
      .limit(1);
    
    if (fetchError) {
      console.error('Error fetching existing settings:', fetchError);
      alert('Error fetching settings: ' + fetchError.message);
      return;
    }
    
    let result;
    if (existingData && existingData.length > 0) {
      // Update existing record
      const { data, error } = await client
        .from('profile_settings')
        .update(profileSettingsData)
        .eq('id', existingData[0].id)
        .select();
      
      result = { data, error };
    } else {
      // Insert new record
      const { data, error } = await client
        .from('profile_settings')
        .insert(profileSettingsData)
        .select();
      
      result = { data, error };
    }
    
    if (result.error) {
      console.error('Error saving profile settings:', result.error);
      alert('Error saving settings: ' + result.error.message);
      return;
    }
    
    alert('Settings saved successfully!');
    
    // Update store name on main page if it exists
    updateStoreNameOnMainPage(profileSettingsData.store_name);
  } catch (error) {
    console.error('Error saving profile settings:', error);
    alert('Error saving settings: ' + error.message);
  }
}

// Update store name on main page
function updateStoreNameOnMainPage(storeName) {
  // Store the setting in localStorage for the main page to use
  localStorage.setItem('watchStoreName', storeName);
  
  // Also store watermark settings
  localStorage.setItem('watchWatermarkUrl', profileSettingsData.watermark_url);
  localStorage.setItem('watchWatermarkOpacity', profileSettingsData.watermark_opacity);
  localStorage.setItem('watchWatermarkPosition', profileSettingsData.watermark_position);
  localStorage.setItem('watchWatermarkSize', profileSettingsData.watermark_size);
}

