        wm.style.transform = 'translate(-50%, -50%)';
      }
    } else {
      const positions = {
        'top-left': { top: '10px', left: '10px', right: 'auto', bottom: 'auto' },
        'top-right': { top: '10px', right: '10px', left: 'auto', bottom: 'auto' },
        'bottom-left': { bottom: '10px', left: '10px', top: 'auto', right: 'auto' },
        'bottom-right': { bottom: '10px', right: '10px', top: 'auto', left: 'auto' },
        'center': { top: '50%', left: '50%', transform: 'translate(-50%, -50%)', right: 'auto', bottom: 'auto' }
      };
      
      const pos = positions[savedWatermarkPosition] || positions['bottom-right'];
      Object.keys(pos).forEach(key => {
        wm.style[key] = pos[key];
      });
    }
    
    zoomInner.appendChild(wm);
  } catch (e) { /* ignore */ }
}

// Function to create dynamic grids based on MASTER_GROUP_LIST and current SKU parts
function createDynamicGrids() {
  const controlsPanel = document.getElementById('controls-panel');
  if (!controlsPanel) return;
  try { window.SUB_FILTERS = window.SUB_FILTERS || {}; } catch(_) {}
  
  // Find the buttons container to preserve it
  const buttonsContainer = controlsPanel.querySelector('.flex.gap-3');
  
  // Clear everything except the first paragraph and buttons
  const firstP = controlsPanel.querySelector('p');
  controlsPanel.innerHTML = '';
  if (firstP) controlsPanel.appendChild(firstP);
  
  // Get groups that exist in current SKU
  const currentParts = PARTS || {};
  const availableGroups = MASTER_GROUP_LIST.filter(g => currentParts[g.key] && currentParts[g.key].length > 0);
  
  // Create grid for each available group
  availableGroups.forEach(groupInfo => {
    const key = groupInfo.key;
    
    // Create title
    const title = document.createElement('h3');
    title.className = 'part-title';
    title.textContent = `${groupInfo.name_th} / ${groupInfo.name_en}`;
    controlsPanel.appendChild(title);
    
    // Subcategory filter (if any)
    const subWrap = document.createElement('div');
    subWrap.className = 'mb-2';
    const scSelect = document.createElement('select');
    scSelect.id = `sc-filter-${key}`;
    scSelect.className = 'border border-slate-300 rounded-md text-slate-700 bg-white px-2 py-1 text-sm';
    const firstOpt = document.createElement('option'); firstOpt.value = 'all'; firstOpt.textContent = 'All'; scSelect.appendChild(firstOpt);
    try {
      const fromList = getSubcatList(currentSKU, key);
      const fromMeta = unionSubcatsFromMeta(currentSKU, key);
      Array.from(new Set([...(fromList||[]), ...(fromMeta||[])])).forEach(v => { const o=document.createElement('option'); o.value=v; o.textContent=v; scSelect.appendChild(o); });
    } catch (_) {}
    scSelect.addEventListener('change', () => { try { window.SUB_FILTERS = window.SUB_FILTERS || {}; window.SUB_FILTERS[key] = scSelect.value; } catch(_){} renderGrid(`grid-${key}`, PARTS[key] || [], key, {}); });
    subWrap.appendChild(scSelect);
    controlsPanel.appendChild(subWrap);
    
    // Create grid
    const grid = document.createElement('div');
    grid.id = `grid-${key}`;
    grid.className = 'part-grid';
    controlsPanel.appendChild(grid);
  });
  
  // Re-append buttons container
  if (buttonsContainer) controlsPanel.appendChild(buttonsContainer);
}

document.addEventListener("DOMContentLoaded", async () => {
  // Load store name from localStorage or use default
  const storeNameDisplay = document.getElementById('store-name-display');
  if (storeNameDisplay) {
    const savedStoreName = localStorage.getItem('watchStoreName');
    if (savedStoreName) {
      storeNameDisplay.textContent = savedStoreName;
    }
  }
  
  // show loading overlay until catalog and initial images are loaded
  showLoading(true);
  await maybeLoadCatalogFromSupabase();
  
  // Create dynamic layers and grids after loading catalog
  createDynamicLayers();
  createDynamicGrids();
  
  // preload images for the initial SKU to avoid layout shift
  try { await preloadImagesForSKU(currentSKU, 4000); } catch (e) { /* ignore */ }
  showLoading(false);
  // Set CSS var for header height so main can fit exactly 1 screen
  applyHeaderHeightVar();
  window.addEventListener('resize', applyHeaderHeightVar);
  // Default state (index 0) - create dynamically from current PARTS
  const state = {};
  Object.keys(PARTS || {}).forEach(key => {
    if (key !== '__name') state[key] = 0;
  });

  // Render grids dynamically for all groups that exist in current SKU
  Object.keys(PARTS || {}).forEach(key => {
    if (key === '__name') return;
    const items = PARTS[key];
    if (Array.isArray(items) && items.length > 0) {
      renderGrid(`grid-${key}`, items, key, state);
      // Mobile overlay grids (share same data/state)
      renderGrid(`mgrid-${key}`, items, key, state);
    }
  });

  // Setup mobile view
  renderMobilePartGroups(state);

