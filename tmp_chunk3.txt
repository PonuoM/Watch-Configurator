    scSelect.addEventListener('change', () => { try { window.SUB_FILTERS = window.SUB_FILTERS || {}; window.SUB_FILTERS[key] = scSelect.value; } catch(_){} renderGrid(`grid-${key}`, PARTS[key] || [], key, {}); });
    subWrap.appendChild(scSelect);
    controlsPanel.appendChild(subWrap);
    
    // Create grid
    const grid = document.createElement('div');
    grid.id = `grid-${key}`;
    grid.className = 'part-grid';
    controlsPanel.appendChild(grid);
  });
  
  // Re-append buttons container
  if (buttonsContainer) controlsPanel.appendChild(buttonsContainer);
}

document.addEventListener("DOMContentLoaded", async () => {
  // Load store name from localStorage or use default
  const storeNameDisplay = document.getElementById('store-name-display');
  if (storeNameDisplay) {
    const savedStoreName = localStorage.getItem('watchStoreName');
    if (savedStoreName) {
      storeNameDisplay.textContent = savedStoreName;
    }
  }
  
  // show loading overlay until catalog and initial images are loaded
  showLoading(true);
  await maybeLoadCatalogFromSupabase();
  
  // Create dynamic layers and grids after loading catalog
  createDynamicLayers();
  createDynamicGrids();
  
  // preload images for the initial SKU to avoid layout shift
  try { await preloadImagesForSKU(currentSKU, 4000); } catch (e) { /* ignore */ }
  showLoading(false);
  // Set CSS var for header height so main can fit exactly 1 screen
  applyHeaderHeightVar();
  window.addEventListener('resize', applyHeaderHeightVar);
  // Default state (index 0) - create dynamically from current PARTS
  const state = {};
  Object.keys(PARTS || {}).forEach(key => {
    if (key !== '__name') state[key] = 0;
  });

  // Render grids dynamically for all groups that exist in current SKU
  Object.keys(PARTS || {}).forEach(key => {
    if (key === '__name') return;
    const items = PARTS[key];
    if (Array.isArray(items) && items.length > 0) {
      renderGrid(`grid-${key}`, items, key, state);
      // Mobile overlay grids (share same data/state)
      renderGrid(`mgrid-${key}`, items, key, state);
    }
  });

  // Setup mobile view
  renderMobilePartGroups(state);

  applySelections(state);
